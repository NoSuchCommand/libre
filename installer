#!/bin/bash

# Default config var
LIBREI_VERSION="0.5.19"
LIBREI_REQUIREMENTS_CENTOS="git curl python-pip ansible jq"
TMP_DEST=/tmp/libre
INSTALLER_BIN=/usr/local/bin/installer-libre
ANSIBLE_DEST=/usr/local/lib/libre-ansible
INSTALLER_URL=https://raw.githubusercontent.com/NoSuchCommand/libre/testing/installer
THIS_SCRIPT="$(realpath $0)"

# config var
LIBRE_USESUDO=yes
LIBRE_TYPE=instructor
LIBRE_TOOLREPO_URL=https://github.com/NoSuchCommand/libre
LIBRE_TOOLREPO_BRANCH=testing
LIBRE_TOOLREPO_BASE=/
UPDATE=n

# get and store the operating system name
source /etc/os-release
OS="$NAME"
OS_NAME="$PRETTY_NAME"

# use xterm
export TERM=xterm

# check for super-user identity
if [ "$(id -u)" != "0" ]; then
    echo "  ERROR ! This script must be run as root or you must have sudo"
    echo "  ERROR ! Try to execute 'sudo -i' and run again this command"
    exit 1
fi

# Display libre installer header
function print_header {
    cat <<-'BANNER'
	  _     _ _                    _           _        _ _
	 | |   (_) |__  _ __ ___      (_)_ __  ___| |_ __ _| | | ___ _ __
	 | |   | | '_ \| '__/ _ \_____| | '_ \/ __| __/ _` | | |/ _ \ '__|
	 | |___| | |_) | | |  __/_____| | | | \__ \ || (_| | | |  __/ |  
	 |_____|_|_.__/|_|  \___|     |_|_| |_|___/\__\__,_|_|_|\___|_|

	BANNER
}

# Display information
function print_info {
    print_header
    echo "installer : v$LIBREI_VERSION"
    echo "repo      : $LIBRE_TOOLREPO_URL"
    echo "branch    : $LIBRE_TOOLREPO_BRANCH"
    echo "base      : $LIBRE_TOOLREPO_BASE"
    echo "OS        : $OS_NAME"
    echo "host      : $HOSTNAME"
    echo "type      : $LIBRE_TYPE"
    echo
}

function check_type {
    [ $# -eq 1 ] || {
        return 1
    }

    local types=(instructor student)

    for t in "${types[@]}"; do
        [ "$1" == "$t" ] && return 0
    done

    return 2
}

# Display information
function prep_env {
    if [ ! -f $INSTALLER_BIN ]; then
        rm -rf $INSTALLER_BIN
        cp "$THIS_SCRIPT" $INSTALLER_BIN
    fi
    for d in $TMP_DEST $ANSIBLE_DEST; do
        mkdir -p $d &> /dev/null || {
            echo "  ERROR ! Unable to create $d"
            exit 1
        }
        if [ ! -w $d ]; then
            echo "  ERROR ! $d is not writable"
            exit 1
        fi
    done
}

# installer update system
function install_deps {
    if [ "$UPDATE" == "y" ]; then
        echo "Updating OS $OS installation (cloud take minutes...)"
        yum update -y &> /dev/null
    fi
    echo "Installing packages for $OS"
    (
        yum install -y epel-release                &&
        yum install -y $LIBREI_REQUIREMENTS_CENTOS &&
        pip install --upgrade pip                  &&
        pip install --upgrade Jinja2
    ) &> /dev/null                                 || {
        echo "  ERROR ! Unable to install dependencies"
        exit 1
    }
}

# installer install libre
function fetch_installer {
    echo "Create temporary storage"
    if [ -w $TMP_DEST ]; then
        echo "remove previous $TMP_DEST directory"
        rm -rf $TMP_DEST
    fi
    echo "create $TMP_DEST directory"
    mkdir -p $TMP_DEST
    cd $TMP_DEST
    echo "Clone tools repository $LIBRE_TOOLREPO_URL"
    git clone $LIBRE_TOOLREPO_URL .
    if [ "$?" -eq 0 ]; then
        echo "Change branch for $LIBRE_TOOLREPO_BRANCH"
        git checkout $LIBRE_TOOLREPO_BRANCH &> /dev/null
        echo "Copy libre playbook into $ANSIBLE_DEST"
        cp -r $TMP_DEST$LIBRE_TOOLREPO_BASE/ansible/* $ANSIBLE_DEST/
    fi
    cd - &> /dev/null
}

# installer install libre
function clean_installer {
    echo "Remove $TMP_DEST"
    rm -rf $TMP_DEST
}

# installer check post-installation
function check_installation {
    if [ ! -d $ANSIBLE_DEST ]; then
        echo "  ERROR ! $ANSIBLE_DEST doesn't exist"
    fi
}

# installer installation process
function install_libre {
    if [ "$LIBRE_TYPE" == "student" ]; then
        LIBRE_TARGET="students"
    else
        LIBRE_TARGET="instructor"
    fi
    print_info
    perform_installation
    cd $ANSIBLE_DEST
    LIBRE_SUDO=""
    if [[ "$(id -u)" != "0" && "$LIBRE_USESUDO" == "yes" ]]; then
        LIBRE_SUDO=" -K "
    fi
    ansible-playbook -i inventory.yml ${LIBRE_SUDO} -e target=${LIBRE_TARGET} playbooks/${LIBRE_TYPE}/install.yml
    echo -n " Do you want to continue by installing training session (y) : "
    read doInstall
    if [[ "$doInstall" == "" || "$doInstall" == "yes" || "$doInstall" == "y" ]]; then
        libre-session install
    fi
}

# do installation process
function perform_installation {
    prep_env
    install_deps
    fetch_installer
    clean_installer
    check_installation
}

# installer uninstall process
function uninstall_libre {
    print_info
    perform_uninstallation
}

# do uninstall process
function perform_uninstallation {
    if [ -d $ANSIBLE_DEST ]; then
        cd $ANSIBLE_DEST
        ansible-playbook -i inventory.yml -e target=local playbooks/$1/uninstall.yml
    fi
}

# reinstaller remove libre environement
function reinstall_libre {
    print_info
    perform_uninstallation
    echo "Refresh installer-libre"
    rm -f $INSTALLER_BIN
    curl -s -L $INSTALLER_URL -o $INSTALLER_BIN &> /dev/null
    chmod +x $INSTALLER_BIN
    $INSTALLER_BIN install $LIBRE_TYPE
}

# Display installer usage
function print_usage {
    cat <<-EOF
	Startx Formation training environment installer

	Usage:
	  $0 [-t INSTALL_TYPE] [-u] [command]

	Options:
	     -t INSTALL_TYPE  install LIBRE_TYPE training environment
	                      INSTALL_TYPE can be one of:
	                                                    - instructor (default)
	                                                    - student
	     -u               fully update the system during installation

	Availables commands:
	     install          install LIBRE TMS and instructor or student training
	                      environment (interactive)
	     uninstall        uninstall LIBRE TMS and training environment
	     reinstall        re-install LIBRE TMS and training environment
	EOF
}

while getopts :t:u c; do
    case "$c" in
        t)
            check_type "$OPTARG" || {
                echo "  ERROR ! Invalid argument for option -t : $OPTARG"
                print_usage
                exit 1
            }
            LIBRE_TYPE="$OPTARG"
            ;;
        u)
            UPDATE=y
            ;;
        '?')
            echo "  ERROR ! Unsupported option : -$OPTARG"
            print_usage
            exit 1
            ;;
    esac
done

shift $((OPTIND - 1))

# Dispatch input arguments
case "$1" in
    "install")        install_libre ;;
    "uninstall")      uninstall_libre ;;
    "reinstall")      reinstall_libre ;;
    *)                print_usage; exit 1 ;;
esac
